import java.io.*;
import java.util.*;
import java.lang.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


public class Solution {
    
    // takes a string and two characters, returns the filtered string
    // containing only the two chars specified
    static String makeString(char[] perms, char[] arr) {
        StringBuilder sb = new StringBuilder();
        for (int i=0; i<arr.length; i++) {
            if (arr[i] == perms[0] || arr[i] == perms[1]) {
                sb.append(arr[i]);
            }
        }
        return sb.toString();
    }
    
    // checks a 2 char string to ensure the chars are alternating 
    // if so return the string length, otherwise return 0
    static int checkString(String str) {
        char[] arr = str.toCharArray();
        char firstChar = arr[0];
        for (int i=1; i<arr.length; i++) {
            if ((i%2 == 0 && arr[i] != firstChar) || (i%2 == 1 && arr[i] == firstChar)) {
                return 0;
            }
        }
        return str.length();
    }
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int len = in.nextInt();
        String s = in.next();
        char[] arr = s.toCharArray();
        
        // create map of character counts {character, count(frequency)}
        HashMap<Character, Integer> charCounts = new HashMap<>();
        for (char c: arr) {
            if (charCounts.containsKey(c)) {
                charCounts.put(c, charCounts.get(c) + 1);
            } else {
                charCounts.put(c, 1);
            }
        }
        
        // ensure there are 2 or more distinct characters
        if (charCounts.keySet().size() < 2) {
            System.out.println("0");
            return;
        }
               
        // get permutations of 2 char combinations
        ArrayList<Character> uniqueChars = new ArrayList<>(charCounts.keySet());
        HashSet<String> permutations = new HashSet<>();
        
        for (int i=0; i<uniqueChars.size(); i++){
            for (int j=0; j<uniqueChars.size(); j++){
                if(Character.getNumericValue(uniqueChars.get(i)) < Character.getNumericValue(uniqueChars.get(j))) {
                    permutations.add(new StringBuilder().append(uniqueChars.get(i)).append(uniqueChars.get(j)).toString());
                }
            }
        }
              
        // iterate over permutations to find max length
        int longest = 0;
        for (String perms: permutations){
            String twoCharString = makeString(perms.toCharArray(), arr);
            if (checkString(twoCharString) > longest) {
                longest = twoCharString.length();
            }
        }
        System.out.println(longest);     
    }
    
}
