import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.util.Arrays;

public class Solution {
    
    // creates an empty board - an adjacency list with all possible moves from each square
    static Map<Integer, List<Integer>> createBoard() {
        Map<Integer, List<Integer>> board = new HashMap<Integer, List<Integer>>(101);
        
        for (int startSquare=1;  startSquare<=100; startSquare++) {
            List<Integer> possibleMoves = new ArrayList<>(6);
            for (int diceRoll=0; diceRoll<6; diceRoll++) {
                if (startSquare + diceRoll + 1 <= 100)
                    possibleMoves.add(diceRoll, startSquare + diceRoll + 1);
            }
            board.put(startSquare, possibleMoves);
        }
        return board;
    }
    
    
    static void addLadders(Map<Integer, List<Integer>> board, int[][] ladders) {
        for (int i=0; i<ladders.length; i++) {
            int bottomOfLadder = ladders[i][0];
            int topOfLadder = ladders[i][1];
            board.get(bottomOfLadder).clear();
            for (int square=1; square<100; square++) {
                List<Integer> moves = board.get(square);
                if (moves.contains(bottomOfLadder)) {
                    int moveIndex = moves.indexOf(bottomOfLadder);
                    moves.set(moveIndex, topOfLadder);
                }
            }
        }
    }
    
    
    static void addSnakes(Map<Integer, List<Integer>> board, int[][] snakes) {
        for (int i=0; i<snakes.length; i++) {
            int mouthOfSnake = snakes[i][0];
            int tailOfSnake = snakes[i][1];
            board.get(mouthOfSnake).clear();
            for (int square=1; square<100; square++) {
                List<Integer> moves = board.get(square);
                if (moves.contains(mouthOfSnake)) {
                    int moveIndex = moves.indexOf(mouthOfSnake);
                    moves.set(moveIndex, tailOfSnake);  
                }
            }
        }
    }
    
    
    // returns the minimum number of moves to square 100 using a BFS
    static int findMinMoves(Map<Integer, List<Integer>> board) {
    
        int[] minMoves = new int[101];
        boolean[] visited = new boolean[101];

        Arrays.fill(minMoves, 999);
        Arrays.fill(visited, false);
        
        Queue<Integer> squaresToCheck = new LinkedList<>();
        
        squaresToCheck.add(1);
        minMoves[1] = 0;
        
        while (!squaresToCheck.isEmpty()) {
            int squareToCheck = squaresToCheck.remove();
            visited[squareToCheck] = true;
            
            for (int child : board.get(squareToCheck)) {
                // continue if already visited
                if (visited[child] == true)
                    continue;
                
                // update min moves if smaller
                int movesToChild = minMoves[squareToCheck]+1;
                if (movesToChild < minMoves[child])
                    minMoves[child] = movesToChild;

                // add to squares to check if not there
                if (!squaresToCheck.contains(child))
                    squaresToCheck.add(child);
            }
        }
        
        // square 100 is unreachable
        if (minMoves[100] == 999)
            minMoves[100] = -1;
        
        return minMoves[100];
    }

    
    static int quickestWayUp(int[][] ladders, int[][] snakes) {
        Map<Integer, List<Integer>> board = new HashMap<Integer, List<Integer>>(createBoard());
        addLadders(board, ladders);
        addSnakes(board, snakes);
        return findMinMoves(board);
    }

    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int[][] ladders = new int[n][2];
            for(int ladders_i = 0; ladders_i < n; ladders_i++){
                for(int ladders_j = 0; ladders_j < 2; ladders_j++){
                    ladders[ladders_i][ladders_j] = in.nextInt();
                }
            }
            int m = in.nextInt();
            int[][] snakes = new int[m][2];
            for(int snakes_i = 0; snakes_i < m; snakes_i++){
                for(int snakes_j = 0; snakes_j < 2; snakes_j++){
                    snakes[snakes_i][snakes_j] = in.nextInt();
                }
            }
            int result = quickestWayUp(ladders, snakes);
            System.out.println(result);
        }
        in.close();
    }
}
